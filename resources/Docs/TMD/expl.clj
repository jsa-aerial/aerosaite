[{:code7 {:label "Code", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :code7, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n(deps '[[techascent/tech.ml.dataset \"6.016\"]\n        [scicloj/tablecloth \"6.012\"]])\n\n(require '[tech.v3.dataset :as ds]\n         '[tech.v3.datatype.functional :as dfn]\n         '[tech.v3.dataset.reductions :as dsr]\n         '[tech.v3.datatype :as dtype]\n         '[tech.v3.libs.fastexcel :as fe]\n         '[tablecloth.api :as tc])\n\n(tc/dataset \"https://vega.github.io/vega/data/cars.json\")\n\n(-> \"~/Downloads/SpnCIPa_R1_96bc3_count.csv\" fs/fullpath\n  (tc/dataset {:key-fn keyword})\n  :Count\n  (->>(apply +)))\n\n(-> \"~/Downloads/SpnCIPa_R1_position8-22_count.csv\" fs/fullpath\n  (tc/dataset {:key-fn keyword})\n  :Count\n  (->> (apply +)))\n\n\n(def dt-vignettes\n  \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/\")\n(def flights-url (str dt-vignettes \"flights14.csv\"))\n\n(def flights (tc/dataset flights-url {:key-fn keyword}))\n(tc/column-names flights)\n(tc/write-csv! flights (fs/fullpath \"~/Data/test2.csv.gz\"))\n(def flights\n  (tc/dataset (fs/fullpath \"~/Data/test.csv.gz\") {:key-fn keyword}))\n\n\n;;; Descriptive stats overview as table\n(tc/info flights)\n;;; Brief overview\n(tc/info flights :basic)\n;;; Column meta data\n(tc/info flights :columns)\n\n\n;;; All rows with any column with missing values\n(tc/select-missing flights)\n;;; All rows missing :year data\n(tc/select-missing flights :year)\n;;; All rows missing :carrier or :origin data\n(tc/select-missing flights [:carrier :origin])\n\n\n;;; flights as map of column names to columns\n;;; **NOTE** the values as seqs are BIG (dataset row count, here 253316)\n(->> flights first key)\n(->> flights first second type)\n(->> flights first second (map inc) count)\n\n\n;;; Various row selections\n(tc/head flights)\n(tc/head flights 10)\n(tc/tail flights 10)\n;;; Random with count, no repeat rows, forced same rows\n(tc/random flights 20)\n(tc/random flights 20 {:repeat? false})\n(tc/random flights 20 {:seed 42})\n(tc/random flights 20 {:seed 42})\n\n;;; Return random row; force to always the same one\n(tc/rand-nth flights)\n(tc/rand-nth flights {:seed 42})\n\n;;; Random shuffle the rows of dataset; force to same shuffle\n(tc/shuffle flights)\n(tc/shuffle flights {:seed 42})\n\n\n\n(def events-ds\n  (tc/dataset \"https://api.github.com/events\"\n              {:key-fn keyword :file-type :json}))\n(tc/info events-ds :columns)\n\n;;; Can use keys as in Clojure maps to get columns by name\n;;;     (assumes kw column names)\n(tc/column events-ds :actor)\n(events-ds :actor)\n\n\n;;; Any sub-keys that are themselves collections can be turned into\n;;; datasets and this can also be interesting:\n(ds/column->dataset events-ds :actor identity)\n(tc/separate-column events-ds :actor identity)\n\n\n;;;(ds/->dataset \"/home/jsa/Data/2021-dead-list.xlsx\")\n(-> (fe/workbook->datasets \"/home/jsa/Data/2021-dead-list.xlsx\") first)\n\n(-> (tc/dataset\n     \"/home/jsa/Data/2021-dead-list2.xlsx\"\n     {:key-fn #(-> % str (str/split #\" \") (->> (apply str)) keyword)}))\n\n\n\n(def home-data (fs/fullpath \"~/Data\"))\n(def baseball (fs/join home-data \"BaseBall/baseballdatabank-master/core\"))\n\n(def pitching (fs/join baseball \"Pitching.csv\"))\n(def teams (fs/join baseball \"Teams.csv\"))\n\n(def pitching-dt (ds/->dataset pitching {:key-fn keyword}))\n(def teams-dt (ds/->dataset teams {:key-fn keyword}))\n\n(-> teams-dt (->> (ds/filter #(= (% :yearID) 2019) [:yearID]))\n  (ds/tail))\n\n;;;(->> (fs/join home-data \"/RData/faithful.csv\")\n;;;     slurp str/split-lines\n;;;     (mapv #(-> % (str/split #\"\\t\") second))\n;;;     (str/join \"\\n\")\n;;;     (spit (fs/join home-data \"RData/good-faithful.csv\")))\n\n(def faithful\n  (ds/->dataset (fs/join home-data \"RData/faithful.csv\") {:key-fn keyword}))\n(ds/filter #(< 49 (% :waiting) 51) faithful)\n(->> faithful ds/mapseq-reader (group-by #(% :waiting))\n     (mapv (fn[[k v]] {:x k :y (count v)}))\n     (sort-by :x))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:end", :out-height "900px", :eid "ed-code7", :height "900px"}}, :specs []}} {:tmdhlp {:label "TMD fns", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :tmdhlp, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n:clj\n\n(defn desc-stats [ds]\n  (let [ds (tc/info ds)]\n    (-> ds\n      (tc/add-or-replace-columns\n       (let [sd (ds :standard-deviation)\n             vr (dtype/make-reader \n                 :float64 (tc/row-count ds)\n                 (let [x (sd idx)]\n                   (if (number? x) (* x x) -1)))]\n         {:variance vr}))\n      (tc/rename-columns {:standard-deviation :std-dev})\n      (tc/select-columns\n       [:col-name :min :max :mean :std-dev :variance :skew])\n      (tc/reorder-columns [:col-name :min :max] [:mean :std-dev :variance]))))\n\n\n(defn colfreq [ds col cntcol]\n  (-> ds\n    (tc/group-by [col])\n    (tc/aggregate {cntcol tc/row-count})))\n\n\n\n(defn reduce-cols [keycol col-reducer-map ds-seq]\n  (let [colnames (-> ds-seq first tc/column-names)]\n    (dsr/group-by-column-agg\n     keycol\n     (-> colnames\n       (->> (mapv #(vector % (dsr/first-value %)))\n            (into (array-map)))\n       (merge col-reducer-map))\n     ds-seq)))\n\n\n\n\n\n:end", :out-height "900px", :eid "ed-tmdhlp", :height "900px"}}, :specs []}} {:xchg {:label "Energy Imbalance", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :xchg, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n:clj\n\n(def joules-tn (double 4.2E+9))\n(= (* 5.0E+10 joules-tn) 2.1E+20)\n\n(def extra-joules-day (* 5E+10 (* 2E+4 joules-tn))) ; 2.1E+20\n\n(= 5E+10 (/ extra-joules-day (double (* 2E+4 joules-tn))))\n\n(def sqKM-earth (* 510.0 1E6))\n(def sqM-earth (* sqKM-earth 1E6))\n\n(def xWsqM 0.7)\n(def xJsqM-perday (* 3600 24 xWsqM))\n(def xTotal-perday (* xJsqM-perday sqM-earth))\n\n(/ xTotal-perday joules-tn)\n\n(def TotCW-MTn (-> 1.5E5 (* 6E4) (/ 1E6)))\n\n(def chixulub-MTn 100E6)\n\n(/ chixulub-MTn  TotCW-MTn)\n\n(def xWtot (* xWsqM sqM-earth))\n\n\n\n", :out-height "900px", :eid "ed-xchg", :height "900px"}}, :specs []}} {:zinb {:label "Zinb", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :zinb, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(def fish\n  (-> \"https://stats.idre.ucla.edu/stat/data/fish.csv\" tc/dataset\n    (tc/set-dataset-name \"Fish\")\n    (tc/rename-columns {\"count\" \"caught\"})))\n\n(-> fish (vary-meta assoc :print-index-range :all))\n\n(tc/info (tc/info fish))\n(tc/info fish :columns)\n\n\n(->> [\"nofish\" \"livebait\" \"camper\"]\n  (mapv #(vector % (dfn/reduce-+ (fish %))))\n  (into {}))\n\n(-> fish (tc/column \"caught\") frequencies)\n\n\n(-> fish desc-stats (tc/select-rows[1 2 5]))\n\n(-> fish (colfreq \"caught\" :count) (tc/order-by \"caught\"))\n\n\n(-> fish (tc/group-by \"caught\")\n  tc/as-regular-dataset (tc/order-by :name)\n  (tc/add-or-replace-columns\n   (let [ds (-> fish (colfreq \"caught\" :count) (tc/order-by \"caught\"))]\n     {:caught (tc/column ds \"caught\")  :count (tc/column ds :count)})))\n\n\n(let [data (clj (-> fish (colfreq \"caught\" :count) (tc/order-by \"caught\")\n                  (tc/rows :as-maps) vec))]\n  (hmi/sv! (hc/xform \n            ht/bar-chart :FID :fcaught :VID :vcaught :TID :charts\n            :HEIGHT 600 :WIDTH 800\n            :X :caught :Y :count :DATA data)))\n\n\n\n\n(def bikes (fs/fullpath \"~/Data/BikeCounts\"))\n\n(def bikecounts\n  (mapv #(fs/join bikes (format \"%s-2017.csv\" %))\n        [\"apr\" \"may\" \"jun\" \"jul\" \"aug\" \"sep\" \"oct\"]))\n\n(-> bikecounts first tc/dataset tc/info)\n\n(defn get-dataset [file]\n  (-> (tc/dataset file)\n    (tc/select-columns\n     #{\"Date\" \"Day\" \"High Temp (째F)\" \"Low Temp (째F)\" \"Precipitation\"\n       \"Brooklyn Bridge\"})\n    (tc/rename-columns {\"Date\" :date  \"Day\" :day\n                        \"High Temp (째F)\" :high \"Low Temp (째F)\" :low\n                        \"Precipitation\" :precip\n                        \"Brooklyn Bridge\" :brooklyn})\n    (tc/add-or-replace-columns\n     {:brooklyn #(->> (dtype/->reader (tc/column % :brooklyn) :object)\n                   (mapv (fn[cnt]\n                           (-> cnt (str/replace \",\" \"\") Integer. long))))\n      :precip #(->> (dtype/->reader (tc/column % :precip) :object)\n                 (mapv (fn[p] (if (= p \"T\")\n                                0.001\n                                (-> p Double. double)))))})\n    (tc/convert-types {:brooklyn :int64 :precip :float64})))\n\n(-> (->> bikecounts (mapv get-dataset) (apply tc/concat))\n  (tc/select-rows #(= (% :day) \"Saturday\"))\n  (colfreq :brooklyn :count) (tc/order-by :count :desc))\n\n(let [data (clj (-> (->> bikecounts (mapv get-dataset)\n                      (apply tc/concat))\n                  ;(colfreq :brooklyn :count))\n                  (tc/rows :as-maps) vec))]\n  (hmi/sv! (hc/xform\n            ht/bar-chart :FID :fbikes :VID :vbikes :TID :charts\n            :HEIGHT 600 :WIDTH 1000\n            :DATA data\n            :X :date :XTYPE :temporal :Y :brooklyn)))\n\n\n(require '[aerial.utils.math.combinatorics :as c])\n\n(defn poisson [lambda k]\n  (/ (* (Math/pow Math/E (- lambda)) (Math/pow lambda k))\n     (double (c/n! k))))\n\n(for [k (range 1 12)] [k (poisson 0.1 k)])\n(for [k (range 1 14)] [k (poisson 1.0 k)])\n(for [k (range 1 14)] [k (poisson 5.0 k)])\n\n\n(let [data (clj (for [k (range 0 15)]\n                  {:x k :y (poisson 5.0 k)}))]\n  (hmi/sv! (hc/xform\n            ht/bar-chart :FID :fpoi :VID :vpoi :TID :charts\n            :HEIGHT 600 :WIDTH 1000\n            :DATA data)))\n\n\n:none\n\n(let [samp [45, 55, 67, 45, 68, 79, 98, 87, 84, 82]\n      Xbar (-> (apply + samp) (/ (count samp)))\n      S    (-> samp (->> (mapv #(Math/pow (- % Xbar) 2)) (apply +))\n             (/ (dec (count samp))) Math/sqrt)]\n  [Xbar S])\n\n;;https://towardsdatascience.com/negative-binomial-regression-f99031bb25b4\n\n\n(defn NBIN [x r P]\n  (* (c/nCk (dec x) (dec r))\n     (Math/pow P r)\n     (Math/pow (- 1 P) (- x r))))\n\n(defn muNBIN [r P] (-> r (/ P) double))\n(muNBIN 2 0.5)\n\n(mapv #(vector % (NBIN % 2 0.5)) (range 2 7))\n(->> (mapv #(NBIN % 2 0.5) (range 7 100)) m/sum)\n\n(let [data (clj (->> 50 (range 2)\n                  (mapv #(do {:x % :y (NBIN % 2 0.5)}))))]\n  (hmi/sv! (hc/xform \n            ht/bar-chart :FID :fnbin :VID :vnbin :TID :charts\n            :HEIGHT 600 :WIDTH 800\n            :DATA data)))\n\n\n(mapv hc/get-default [:HEIGHT :WIDTH])\n\n\n(def m1 (tc/dataset (repeat 3 {:11 1 :12 1 :13 1 :14 1 :15 1})))\n(def m2 (tc/dataset (repeat 2 {:21 2 :22 2 :23 2 :24 2})))\n(def m3 (tc/dataset (repeat 3 {:31 3 :32 3 :33 3})))\n\n(let [m1 (tc/select-columns m1 [:11 :12 :13 :14])\n      m2 (tc/rename-columns m2\n          (->> (tc/column-names m1)\n               (mapv #(vector %1 %2) (tc/column-names m2))\n               (into {})))]\n  (-> (tc/concat m1 m2)\n      (tc/add-or-replace-columns (tc/columns m3))\n      (tc/replace-missing :all :value 0)))\n\n\n\n\n:end", :out-height "900px", :eid "ed-zinb", :height "900px"}}, :specs []}} {:diamonds2 {:label "Diamonds", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :diamonds2, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n(def diamonds\n  (-> \n    \"https://raw.githubusercontent.com/tidyverse/ggplot2/master/data-raw/diamonds.csv\"\n    (tc/dataset\n     {:key-fn keyword :dataset-name \"diamonds\"})))\n\n\n\n(-> diamonds\n  (tc/select-columns [:carat :cut :color :clarity :price])\n  (tc/select-rows (fn[row] (= (row :clarity) \"IF\")))\n  (tc/order-by :price)\n  (tc/head 10)\n  (tc/rows :as-maps))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(defn roundit [r & {:keys [places] :or {places 2}}]\n  (let [n (Math/pow 10.0 places)]\n    (-> r (* n) Math/round (/ n))))\n\n\n\n\n(deps '[[generateme/fastmath \"2.1.6\"]])\n(require '[fastmath.stats :as fms])\n\n(defn calc-correlations-matrix [data cols-to-use]\n  (doall\n   (for [col-1 cols-to-use\n         col-2 cols-to-use]\n     {:col-1 col-1\n      :col-2 col-2\n      :corr (float (fms/pearson-correlation (data col-1) (data col-2)))})))\n\n\n(def simple-data (tc/dataset {:x [1 2 3] :y [4 5 6] :z [9 8 7]}))\n\n(mapv (fn[m] [(type (m :corr)) (type (m :ocorr))])\n      (calc-correlations-matrix simple-data cols-to-use))\n\n\n\n:cljs\n\n(def text-encoding\n  (-> ht/xy-encoding\n    (assoc :text\n           {:field :TXT\n            :type :TTYPE}\n           :color :TCOLOR)\n    (dissoc :x :y :tooltip)))\n\n(def text-layer\n  (-> ht/view-base\n    (assoc :mark (merge ht/mark-base {:type \"text\"})\n           :encoding text-encoding)\n    (dissoc :usermeta :data :height :width)))\n\n(def rect-layer\n  (-> ht/view-base\n    (assoc :mark (merge ht/mark-base {:type \"rect\"})\n           :encoding (dissoc ht/xy-encoding :x :y :tooltip))\n    (dissoc :usermeta :data :height :width)))\n\n(def heatmap-chart\n  (assoc ht/layer-chart\n         :encoding ht/xy-encoding\n         :layer [rect-layer text-layer]))\n\n(def cols-to-use [:x :y :z])\n\n(let [corr \"corr\"\n      test (format \"datum['%s'] < %s\" corr 0.2)])\n(def corr-heatmap\n  (-> heatmap-chart\n    (hc/xform\n     :X :COL1 :XSORT :COLS :XTYPE hc/RMV\n     :Y :COL2 :YSORT :COLS :YTYPE hc/RMV\n     :COLOR {:field :CORR :type \"quantitative\"\n             :scale {:scheme \"redgrey\" :reverse true}}\n     :TXT :CORR :TTYPE \"quantitative\"\n     :TCOLOR {:value \"black\"\n              :condition {:test :TEST :value \"white\"}})\n    (assoc :data ht/data-options :usermeta :USERDATA)))\n\n(let [corr \"corr\"\n      test (format \"datum['%s'] < %s\" corr 0.2)\n      data [1 2 3]]\n  (hc/xform\n   corr-heatmap :FID :f3 :VID :v3\n   :DATA data :CORR corr :COLS cols-to-use :TEST test))\n\n\n\n(def corr-heatmap-2\n  (-> heatmap-chart\n    (hc/xform\n     :X :COL1 :XSORT :COLS :XTYPE hc/RMV\n     :Y :COL2 :YSORT :COLS :YTYPE hc/RMV\n     :COLOR ht/default-color\n     :CFIELD :CORR :CTYPE \"quantitative\" :CSCALE :COLORSCALE\n     :TXT :CORR :TTYPE \"quantitative\"\n     :TCOLOR {:value \"black\"\n              :condition {:test :TEST :value \"white\"}})\n    (assoc :data ht/data-options :usermeta :USERDATA)))\n\n\n\n:none\n\n(hc/get-default :COLORSCALE)\n(hc/update-defaults :COLORSCALE {:scheme \"redgrey\" :reverse true})\n(hc/update-defaults :COLORSCALE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", :out-height "900px", :eid "ed-diamonds2", :height "900px"}}, :specs []}} {:diacharts {:label "Diamond Charts", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :diacharts, :$split 39.94140625, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 0}, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(let [data (clj (-> diamonds\n                  (tc/select-columns [:carat :cut :color :clarity :price])\n                  ;(tc/select-rows (fn[row] (= (row :clarity) \"IF\")))\n                  (tc/order-by :price)\n                  ;(tc/head 1000)\n                  (tc/rows :as-maps)))]\n  (hc/xform\n   ht/bar-chart\n   :FID :f1 :VID :v1\n   :DATA data\n   :HEIGHT 700 :WIDTH {:step 100}\n   :MTOOLTIP {:content :data}\n   :TOOLTIP []\n   :X :price :XTYPE :ordinal :XBIN [:anchor 0 :step 500]\n   :Y :price :YAGG :count\n   :COLOR \"clarity\"\n   :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n   :TOP '[[gap :size \"200px\"]\n          [md {:style {:font-size \"16px\" :width \"800px\"}}\n\"\n### Clarity / Price\n\"] ]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(let [data (clj (calc-correlations-matrix simple-data cols-to-use))\n      cols-to-use [:x :y :z]]\n  (hc/xform\n   heatmap-chart\n   :FID :f2 :VID :v2\n   :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n   :TOP '[[gap :size \"150px\"]\n          [md {:style {:font-size \"16px\" :width \"800px\"}}\n\"\n### Using 'raw' heatmap-chart\n\"] ]\n   :DATA data\n   :X :col-1 :XSORT cols-to-use :XTYPE hc/RMV\n   :Y :col-2 :YSORT cols-to-use :YTYPE hc/RMV\n   :COLOR {:field :corr :type \"quantitative\"\n           :scale {:scheme \"redgrey\" :reverse true}}\n   :TXT :corr :TTYPE \"quantitative\"\n   :TCOLOR {:value \"black\"\n            :condition {:test \"datum['corr'] < 0.2\" :value \"white\"}}\n   ))\n\n\n(let [corr \"corr\"\n      test (format \"datum['%s'] < %s\" corr 0.2)\n      cols-to-use [:x :y :z]\n      data (clj (calc-correlations-matrix simple-data cols-to-use))]\n  (hc/xform\n   corr-heatmap\n   :FID :f3 :VID :v3\n   :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n   :TOP '[[gap :size \"150px\"]\n          [md {:style {:font-size \"16px\" :width \"800px\"}}\n\"\n### Using customized corr-heatmap\n\"] ] \n   :DATA data\n   :COL1 :col-1 :COL2 :col-2\n   :CORR corr :COLS cols-to-use :TEST test))\n\n\n\n\n\n(let [corr \"corr\"\n      test (format \"datum['%s'] < %s\" corr 0.2)\n      cols-to-use [:x :y :z]\n      data (clj (calc-correlations-matrix simple-data cols-to-use))]\n  (hc/xform\n   corr-heatmap-2\n   :FID :f4 :VID :v4\n   :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n   :TOP '[[gap :size \"100px\"]\n          [md {:style {:font-size \"16px\" :width \"800px\"}}\n\"\n### Custom with color scale params\n\"] ] \n   :DATA data\n   :COL1 :col-1 :COL2 :col-2\n   :CORR corr :COLS cols-to-use :TEST test\n   :COLORSCALE {:scheme \"greenblue\" :reverse true}))\n\n\n(let [corr \"corr\"\n      test (format \"datum['%s'] < %s\" corr 0.2)\n      cols-to-use [:x :y :z]\n      data (clj (calc-correlations-matrix simple-data cols-to-use))]\n  (hc/xform\n   corr-heatmap-2\n   :FID :f5 :VID :v5\n   :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n   :TOP '[[gap :size \"100px\"]\n          [md {:style {:font-size \"16px\" :width \"800px\"}}\n\"\n### Defaulted color scale\n\"] ] \n   :DATA data\n   :COL1 :col-1 :COL2 :col-2\n   :CORR corr :COLS cols-to-use :TEST test))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", :out-height "100px", :eid "ed-diacharts", :height "790px"}}, :specs []}}]
