[{:ed3 {:label "Helpers", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :ed3, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n\n:clj\n\n(defn desc-stats [ds]\n  (let [ds (tc/info ds)]\n    (-> ds\n      (tc/add-or-replace-columns\n       (let [sd (ds :standard-deviation)\n             vr (dtype/make-reader \n                 :float64 (tc/row-count ds)\n                 (let [x (sd idx)]\n                   (if (number? x) (* x x) -1)))]\n         {:variance vr}))\n      (tc/rename-columns {:standard-deviation :std-dev})\n      (tc/select-columns\n       [:col-name :min :max :mean :std-dev :variance :skew])\n      (tc/reorder-columns [:col-name :min :max] [:mean :std-dev :variance]))))\n\n\n(defn colfreq [ds col cntcol]\n  (-> ds\n    (tc/group-by [col])\n    (tc/aggregate {cntcol tc/row-count})))\n\n\n\n(defn reduce-cols [keycol col-reducer-map ds-seq]\n  (let [colnames (-> ds-seq first tc/column-names)]\n    (dsr/group-by-column-agg\n     keycol\n     (-> colnames\n       (->> (mapv #(vector % (dsr/first-value %)))\n            (into (array-map)))\n       (merge col-reducer-map))\n     ds-seq)))\n\n\n\n\n\n:end", :out-height "900px", :eid "ed-ed3", :height "900px"}}, :specs []}} {:bos311 {:label "Bos311", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :bos311, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n\n;;; Base deps and requires for TMD and TC\n(deps '[[techascent/tech.ml.dataset \"6.016\"]\n        [scicloj/tablecloth \"6.012\"]])\n\n(require '[tech.v3.dataset :as ds]\n         '[tech.v3.datatype :as dtype]\n         '[tech.v3.datatype.datetime :as datetime]\n         '[tech.v3.datatype.functional :as df]\n         '[tech.v3.dataset.reductions :as dsr]\n         '[tablecloth.api :as tc])\n\n(deps '[[org.nrepl/incomplete \"0.1.0\"]])\n(require '[incomplete.core :as ic])\n\n(ic/completions \"al\")\n\n\n(def bos311in\n  (-> \"~/Data/Bos311\" fs/fullpath (fs/directory-files \".csv\") sort))\n\n(->  bos311in last tc/dataset tc/row-count) ; => 143293\n\n(def allds\n  (-> bos311in ;; butlast\n    (->> (mapv (fn[spec]\n                 (let [name (-> spec fs/basename (fs/replace-type \"\"))]\n                   (-> spec (tc/dataset\n                             {:dataset-name name\n                              :key-fn keyword\n                              :parser-fn {:open_dt :local-date-time\n                                          :close_dt :local-date-time\n                                          :target_dt :local-date-time}})))))\n      (apply tc/concat-copying))\n    (tc/add-columns {:year #(->> % :open_dt\n                              (datetime/long-temporal-field :years))\n                     :month #(->> % :open_dt\n                               (datetime/long-temporal-field :months))})\n;;(tc/row-count) ; => 1025470\n    ))\n\n(+ 1025470 143293) ; => 1168763\n\n\n(def mnum2mnm\n  {1 \"Jan\", 2 \"Feb\", 3 \"Mar\", 4 \"Apr\", 5 \"May\", 6 \"Jun\"\n   7 \"Jul\", 8 \"Aug\", 9 \"Sep\", 10 \"Oct\", 11 \"Nov\", 12 \"Dec\"})\n\n\n(-> allds\n  (tc/select-rows #(and (% :submittedphoto)\n                        (= (% :reason %) \"Graffiti\")))\n  #_tc/head\n  #_tc/row-count\n  (tc/random 5 #_{:seed 1})\n  (tc/select-columns [:year :month :location_street_name :submittedphoto])\n  (tc/rows :as-maps)\n  (->> (mapv (fn[m] (format \"%s %s, %s\\n![img](%s)\"\n                            (-> m :month mnum2mnm)\n                            (m :year)\n                            (m :location_street_name)\n                            (m :submittedphoto))))\n       (str/join \"\\n\")))\n\n\n\n\n(let [imgs (clj (-> allds\n                  (tc/select-rows #(and (% :submittedphoto)\n                                        (= (% :reason %) \"Graffiti\")))\n                  (tc/random 5)\n                  (tc/select-columns\n                   [:year :month :location_street_name :submittedphoto])\n                  (tc/rows :as-maps)\n                  (->> (mapv (fn[m] (format \"%s %s, %s\\n![img](%s)\"\n                                            (-> m :month mnum2mnm)\n                                            (m :year)\n                                            (m :location_street_name)\n                                            (m :submittedphoto))))\n                    (str/join \"\\n\"))))]\n  (hmi/sv!\n   (hc/xform\n    ht/empty-chart\n    :TID :img\n    :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n    :TOP '[[gap :size \"200px\"]\n           [v-box :gap \"10px\"\n            :children\n            [[md {:style {:font-size \"16px\" :width \"800px\"}}\n              :IMGTXT]]]]\n    :IMGTXT imgs)))\n\n\n\n\n\n(def ds1 (tc/dataset {:a [1 2 1 2 3 4 nil nil 4]\n                      :b (range 101 110)\n                      :c (map str \"abs tract\")}))\n(def ds2 (tc/dataset {:a [nil 1 2 5 4 3 2 1 nil]\n                      :b (range 110 101 -1)\n                      :c (map str \"datatable\")\n                      :d (symbol \"X\")}))\n\n(-> ds1 map?)\n\n(tc/concat ds1 ds2)\n(tc/concat ds1 (tc/drop-columns ds2 :d))\n(tc/bind ds1 ds2)\n\n\n(let [ds (-> {:a [1 2 3] :b [:a :b :c]} tc/dataset)]\n  (tc/add-column\n   ds :c #(repeat (tc/row-count %) #{1 2})))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:end", :out-height "900px", :eid "ed-bos311", :height "900px"}}, :specs []}} {:vis {:label "Vis", :opts {:order :row, :eltsper 2, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :vis, :$split 39.16, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 1}, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\"# **%s %s**, %s\\n![img](%s)\"\n\n(let [imgs (clj (-> allds\n                  (tc/select-rows #(and (% :submittedphoto)\n                                        (= (% :reason %) \"Graffiti\")))\n                  (tc/random 5)\n                  (tc/select-columns\n                   [:year :month :location_street_name :submittedphoto])\n                  (tc/rows :as-maps)\n                  (->> (mapv (fn[m] (format \"# **%s %s**, %s\\n![img](%s)\"\n                                            (-> m :month mnum2mnm)\n                                            (m :year)\n                                            (m :location_street_name)\n                                            (m :submittedphoto))))\n                    (str/join \"\\n\"))))]\n  (hmi/sv!\n   (hc/xform\n    ht/empty-chart\n    :FID :img\n    :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n    :TOP '[[gap :size \"200px\"]\n           [v-box :gap \"10px\"\n            :children\n            [[md {:style {:font-size \"16px\" :width \"800px\"}}\n              :IMGTXT]]]]\n    :IMGTXT imgs)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:end", :out-height "100px", :eid "ed-vis", :height "790px"}}, :specs []}}]
