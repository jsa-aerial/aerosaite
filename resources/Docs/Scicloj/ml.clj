[{:deps {:label "Deps/Reqs", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :deps, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns ml.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(deps '[[techascent/tech.ml \"6.019\"]])\n\n(require '[tech.v3.ml])\n\n(deps '[[scicloj/scicloj.ml \"0.1.0-beta3\"]])\n\n\n;;; Base deps and requires for TMD and TC\n(deps '[[techascent/tech.ml.dataset \"6.016\"]\n        [scicloj/tablecloth \"6.012\"]\n        [generateme/fastmath \"2.1.5\"]])\n\n(require '[tech.v3.dataset :as ds]\n         '[tech.v3.datatype :as dtype]\n         '[tech.v3.datatype.functional :as df]\n         '[tech.v3.dataset.reductions :as dsr]\n         '[tech.v3.dataset.modelling :as dsm]\n         '[tablecloth.api :as tc])\n\n(require '[scicloj.ml.core :as ml]\n         '[scicloj.ml.metamorph :as mm]\n         '[scicloj.metamorph.ml :as mmml]\n         '[scicloj.ml.dataset :as mlds]\n         '[scicloj.metamorph.ml.loss :as loss]\n         '[scicloj.ml.smile.classification]\n         '[fastmath.clustering :as clustering])\n\n\n\n", :out-height "900px", :eid "ed-deps", :height "900px"}}, :specs []}} {:ed3 {:label "Expl", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :ed3, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns ml.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n\n(def dataset\n  (tc/dataset {:y (repeatedly 1000 rand)}))\n\n\n(-> dataset\n    (tc/head 5))\n\n(def f\n  (ml/lift tc/head 5))\n\n(-> {:metamorph/data dataset}\n    f)\n\n\n(def g\n  (ml/lift (fn [x]\n             (* 10 x))))\n\n(-> {:metamorph/data 99\n     :abcd 1234}\n    g)\n\n;; {:metamorph/data 990, :abcd 1234}\n\n\n(defn h [ctx]\n  (update ctx\n          :metamorph/data\n          (fn [x]\n            (* 10 x))))\n\n(-> {:metamorph/data 99\n     :abcd           1234}\n    h)\n\n;; {:metamorph/data 990, :abcd 1234}\n\n\n\n(def split\n  (-> dataset\n      dsm/train-test-split))\n\n\n(-> split\n    :train-ds\n    tc/shape)\n\n(-> split\n    :test-ds\n    tc/shape)\n\n\n(defn train-model [dataset]\n  (-> dataset\n      :y\n      df/mean)) ; arithmetic mean\n\n(def model\n  (-> split\n      :train-ds\n      train-model))\n\n(defn predict [dataset model]\n  (-> dataset\n      (tc/add-column :prediction model)))\n\n(-> split\n    :test-ds\n    (predict model))\n\n\n(def toy-pipeline\n  (ml/pipeline\n   (fn [ctx] (update ctx :abcd * 10))\n   (fn [ctx] (update ctx :efgh * 0.1))\n   (fn [ctx] (assoc ctx :ijkl 10))))\n\n\n(-> {:abcd 1234\n     :efgh 5678}\n    toy-pipeline)\n\n\n(defn model [ctx]\n  )\n\n\n(def ml\n  (ml/pipeline\n   (ml/set-inference-target :y)\n   (model)))\n\n\n{:metamorph/data (:train-ds split)\n :metamorph/mode :fit}\n", :out-height "900px", :eid "ed-ed3", :height "900px"}}, :specs []}} {:iris {:label "Iris", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :iris, :$split nil, :out-width "1300px", :fn [quote editor-repl-tab], :layout :left-right, :ns ml.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(defonce iris-dataset\n  (-> \"https://datahub.io/machine-learning/iris/r/iris.csv\"\n      (tc/dataset {:key-fn keyword})))\n\n(def split\n  (-> iris-dataset\n      (dsm/train-test-split)))\n\n(def pipeline-1\n  (ml/pipeline\n   (mm/set-inference-target :class)\n   (mm/categorical->number [:class])\n   (mm/select-columns [:petalwidth :cluster :class])\n   (mmml/model {:model-type :smile.classification/decision-tree\n                :max-nodes 2})))\n\n(def trained-ctx-1\n  (pipeline-1\n   {:metamorph/mode :fit\n    :metamorph/data (:train-ds split)}))\n\n(def predicted-ctx-1\n  (pipeline-1\n   (merge trained-ctx-1\n          {:metamorph/mode :transform\n           :metamorph/data (:test-ds split)})))\n\n(mmml/evaluate-pipelines\n [pipeline-1]\n (tc/split->seq (:train-ds split)\n                :kfold\n                {:seed 1})\n loss/classification-accuracy\n :accuracy)\n\n\n(defn print-data [ctx]\n  (println (:metamorph/data ctx))\n  ctx)\n\n(defn compute-clustering [rows]\n  (-> rows\n      (clustering/k-means 6)))\n\n(defn cluster [ctx]\n  (let [mode (:metamorph/mode ctx)\n        id (:metamorph/id ctx)\n        clustering (case mode\n                     :fit (-> ctx\n                            :metamorph/data\n                            (tc/select-columns\n                             [:sepallength\n                              :sepalwidth\n                              :petallength :petalwidth])\n                            tc/rows\n                            compute-clustering)\n                     :transform (ctx id))\n        clusters (-> ctx\n                   :metamorph/data\n                   (tc/select-columns\n                    [:sepallength :sepalwidth :petallength :petalwidth])\n                   tc/rows\n                   (->> (map\n                         (partial clustering/predict clustering))))]\n    (cond-> ctx\n      (= mode :fit) (assoc id clustering)\n      true          (update :metamorph/data\n                            tc/add-column :cluster clusters))))\n\n\n(def pipeline-2\n  (ml/pipeline\n   (mm/set-inference-target :class)\n   (mm/categorical->number [:class])\n   cluster\n   (mm/select-columns\n    [:petalwidth :cluster :class])\n   (mm/model {:model-type :smile.classification/decision-tree\n              :max-nodes 2})))\n\n(def trained-ctx-2\n  (pipeline-2\n   {:metamorph/mode :fit\n    :metamorph/data (:train-ds split)}))\n\n(def predicted-ctx-2\n  (pipeline-2\n   (merge trained-ctx-2\n          {:metamorph/mode :transform\n           :metamorph/data (:test-ds split)})))\n\n(->> (mmml/evaluate-pipelines\n      [pipeline-1 pipeline-2]\n      (tc/split->seq (:train-ds split)\n                     :kfold\n                     {:k 20})\n      loss/classification-accuracy\n      :accuracy\n      {:return-best-pipeline-only        false\n       :return-best-crossvalidation-only true})\n      (map (fn [cases]\n             (->> cases\n               (map (fn [case]\n                      (-> case\n                        (select-keys [:metric :min :mean :max]))))))))\n\n\n\n\n\n\n\n\n\n\n\n\n:end", :out-height "900px", :eid "ed-iris", :height "900px"}}, :specs []}}]
