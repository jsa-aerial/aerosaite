[{:scratch {:label "Widgets", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :scratch, :$split nil, :out-width "1900px", :fn [quote editor-repl-tab], :layout :left-right, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n:cljs\n\n(def use-defaults? :aerial.hanami.common/use-defaults?)\n\n(defn xframes [frame-map & {:keys [defaults?] :or {defaults? false}}]\n  (let [submap (merge {use-defaults? defaults?} frame-map)]\n    (hc/xform\n     (hc/get-default :USERDATA)\n     submap)))\n\n(defn xc\n  ([comps submap]\n   (let [defaults? (submap :defaults? true)]\n     (hc/xform comps (merge {use-defaults? defaults?} submap))))\n  ([comps k v & kvs]\n   (let [submap (->> (cons k (cons v kvs))\n                  (partition-all 2) (mapv vec) (into {}))]\n     (xc comps submap))))\n\n(def sidebar\n  [['p {:style {:width \"50px\" :min-width \"50px\"}}]\n   ['v-box :children\n    :components]])\n\n\n(def top\n  [['gap :size :TOPGAP]\n   ['v-box :children\n    :components]])\n\n(def bottom\n  [['gap :size :BOTTOM-GAP]\n   ['h-box :children\n    :components]])\n\n\n(def basicButton\n  '[button\n    :label :BBUTTON-label\n    :tooltip :BBUTTON-tooltip\n    :tooltip-position :below-center\n    :disabled? :BBUTTON-disabled?\n    :on-click :BBUTTON-on-click\n    :class :BBUTTON-class])\n\n(def iconButton\n  '[md-icon-button\n    :md-icon-name :IBUTTON-md-icon-name\n    :tooltip :IBUTTON-tooltip\n    :tooltip-position :IBUTTON-tooltip-position\n    :disabled? :IBUTTON-disabled?\n    :on-click :IBUTTON-on-click\n    :class :IBUTTON-class])\n\n(def ciconButton\n  '[md-circle-icon-button\n    :md-icon-name :CIBUTTON-md-icon-name\n    :tooltip :CIBUTTON-tooltip\n    :tooltip-position :CIBUTTON-tooltip-position\n    :disabled? :CIBUTTON-disabled?\n    :size :CIBUTTON-size\n    :on-click :CIBUTTON-on-click\n    :class :CIBUTTON-class])\n\n\n(def checkBox\n  '[checkbox\n   :label :CHECKBOX-label\n   :model :CHECKBOX-model\n   :disabled? :CHECKBOX-disabled?\n   :label-style :CHECKBOX-label-style\n   :on-change :CHECKBOX-on-change])\n\n(def radioButton\n  '[radio-button\n   :label :RBUTTON-label\n   :value :RBUTTON-value\n   :model :RBUTTON-model\n   :label-style :RBUTTON-label-style\n   :on-change :RBUTTON-on-change])\n\n\n(def sliderInput\n  '[v-box :children\n    [[label :label [:span.bold :SLIDER-LBL]]\n     [h-box :children\n      [[label :label :MINLBL]\n       [slider\n        :model :SLIDER-MODEL\n        :min :MIN, :max :MAX, :step :STEP\n        :width :SLIDER-WIDTH\n        :on-change :SLIDER-CHG-FNSYM]\n       [label :label :MAXLBL]]]]])\n\n\n(def singleDropdown\n  ['v-box\n   :children\n   [['label :label [:span.bold :DROPDOWN-LBL]]\n    ['single-dropdown\n     :choices :CHOICES\n     :on-change :DROPDOWN-CHG-FNSYM\n     :model :DROPDOWN-MODEL\n     :placeholder :PLACEHOLDER\n     :width :DROPDOWN-WIDTH]]])\n\n(def selectionList\n  ['v-box\n   :children\n   [['label :label [:span.bold :SELECTION-LBL]]\n    ['selection-list\n     :choices :CHOICES\n     :on-change :SELECTION-CHG-FNSYM\n     :model :SELECTION-MODEL\n     :multi-select? :MULTI?\n     :required? :REQUIRED?\n     :height :SELECTION-HEIGHT\n     :width :SELECTION-WIDTH]]])\n\n\n(def textInput\n  '[input-text\n    :model :INPUT-MODEL\n    :width \"60px\", :height \"26px\"\n    :on-change :INPUT-CHG-FNSYM])\n\n(def markdown\n  ['md {:style {:font-size \"24px\" :width \"1000px\"}}\n   :MDTXT])\n\n\n\n\n(hc/update-defaults\n :BINNED-ENCODING\n {:x {:field :bin_start :type :quantitative\n      :bin {:binned true :step 2}\n      :title :XTITLE}\n  :x2 {:field :bin_end}\n  :y {:field :Y :type :quantitative}}\n :TOPGAP \"500px\" :MDTXT \"Your text here\"\n :BOTTOM-GAP \"500px\"\n :SLIDER-LBL \"**Slider Lable**\"\n :SLIDER-WIDTH \"200px\" :STEP 1.0 \n :MIN 0 :MINLBL #(-> % :MIN str)\n :MAX 10 :MAXLBL #(-> % :MAX str)\n :DROPDOWN-MODEL nil :DROPDOWN-WIDTH \"150px\"\n :SELECTION-MODEL #{} :SELECTION-WIDTH \"150px\" :SELECTION-HEIGHT \"200px\"\n :INPUT-CHG-FNSYM #(-> % :SLIDER-CHG-FNSYM)\n :INPUT-MODEL #(-> % :SLIDER-MODEL))\n(hc/add-defaults :RBUTTON-label-style hc/RMV)\n\n\n\n\n\n", :out-height "900px", :eid "ed-scratch", :height "900px"}}, :specs []}} {:scratch2 {:label "Deps/Reqs", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :scratch2, :$split nil, :out-width "1900px", :fn [quote editor-repl-tab], :layout :left-right, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n:clj\n\n;;; Base deps and requires for TMD and TC\n(deps '[[techascent/tech.ml.dataset \"6.052\"]\n        [scicloj/tablecloth \"6.051\"]])\n\n(require '[tech.v3.dataset :as ds]\n         '[tech.v3.datatype :as dtype]\n         '[tech.v3.datatype.functional :as df]\n         '[tech.v3.dataset.reductions :as dsr]\n         '[tablecloth.api :as tc])\n\n\n:none\n\n(ds/->dataset)\n\n\n\n:clj\n\n(defn desc-stats [ds]\n  (let [ds (tc/info ds)]\n    (-> ds\n      (tc/add-or-replace-columns\n       (let [sd (ds :standard-deviation)\n             vr (dtype/make-reader \n                 :float64 (tc/row-count ds)\n                 (let [x (sd idx)]\n                   (if (number? x) (* x x) -1)))]\n         {:variance vr}))\n      (tc/rename-columns {:standard-deviation :std-dev})\n      (tc/select-columns\n       [:col-name :min :max :mean :std-dev :variance :skew])\n      (tc/reorder-columns [:col-name :min :max] [:mean :std-dev :variance]))))\n\n\n(defn colfreq [ds col cntcol]\n  (-> ds\n    (tc/group-by [col])\n    (tc/aggregate {cntcol tc/row-count})))\n\n\n\n(defn reduce-cols [keycol col-reducer-map ds-seq]\n  (let [colnames (-> ds-seq first tc/column-names)]\n    (dsr/group-by-column-agg\n     keycol\n     (-> colnames\n       (->> (mapv #(vector % (dsr/first-value %)))\n            (into (array-map)))\n       (merge col-reducer-map))\n     ds-seq)))\n\n\n\n\n\n:end\n\n\n\n\n\n\n\n\n\n\n\n\n\n", :out-height "900px", :eid "ed-scratch2", :height "900px"}}, :specs []}} {:tab1 {:label "Overview", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab1, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 1}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"200px\"]\n        [v-box :gap \"10px\"\n         :children\n         [[md {:style {:font-size \"19px\" :width \"800px\"}}\n\"\n# Overview\n---\n## Reactive components\n## Callback functions and databases\n## Mixed code techniques\n## Widgets\n## API\n## Live Examples\n\"]\n\n]]])", :out-height "100px", :eid "ed-tab1", :height "800px"}}, :specs [{:usermeta {:frame {:top [[gap :size "200px"] [v-box :gap "10px" :children [[md {:style {:font-size "19px", :width "800px"}} "\n# Overview\n---\n## Reactive components\n## Callback functions and databases\n## Mixed code techniques\n## Widgets\n## API\n## Live Examples\n"]]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Tab1", :id :tab1, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}} {:tab2 {:label "Reactive components", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab2, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 1}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"200px\"]\n        [v-box :gap \"10px\"\n         :children\n         [[md {:style {:font-size \"19px\" :width \"800px\"}}\n\"\n# Reactive components\n---\n## Reagent based\n## [Re-com](https://re-com.day8.com.au/#/introduction) enabled\n\n\"]\n\n]]])", :out-height "100px", :eid "ed-tab2", :height "800px"}}, :specs [{:usermeta {:frame {:top [[gap :size "200px"] [v-box :gap "10px" :children [[md {:style {:font-size "19px", :width "800px"}} "\n# Reactive components\n---\n## Reagent based\n## [Re-com](https://re-com.day8.com.au/#/introduction) enabled\n\n"]]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Tab2", :id :tab2, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}} {:tab3 {:label "Callbacks", :opts {:order :row, :eltsper 2, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab3, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 1, :fm 2}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n(sc/set-md-defaults\n {:md {:vmargin \"50px\"\n       :margin \"200px\"\n       :width \"800px\"\n       :font-size \"16px\"}\n  :cm {:width \"500px\"\n       :height \"30px\"\n       :out-width \"500px\"\n       :out-height \"0px\"\n       :readonly true\n       :layout :left-right\n       :ed-out-order :first-last}})\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"100px\"]\n        [h-split ;;:gap \"10px\"\n         :initial-split 44\n         :panel-1\n         [md {:style {:font-size \"19px\" :width \"600px\"}}\n\"\n# Callback functions and databases\n---\n## Callbacks\n* On change functions for reactive components\n  - Called when\n    - reactive component model (a ratom) changes\n    - user input on component : click, type in, pull, etc\n  - Typically passed value and model\n  - Output varies on context\n\n* ClojureScript functions\n\n* Mixed code capability\n\n\n          \n## Databases\n* Cannot directly *save* function objects or ratoms\n* Need a simple flexible \\\"serialization\\\"\n* Ratom database for component models\n* Function *symbol* database for callback functions\n\n## Symbol translation\n* Function symbols need to be translated during [hiccup processing](https://github.com/reagent-project/reagent/blob/master/doc/UsingHiccupToDescribeHTML.md)\n* Need to be added to hiccup symbol translation\n* Done via Hanami symbol callback function [symxlate-cb](https://github.com/jsa-aerial/hanami#client-start)\n\n\"]\n         :panel-2\n         [cm :id \"cm1\" :fid :FID\n          :width \"700px\" :out-width \"700px\"\n          :height \"500px\" :out-height \"100px\"\n          :readonly false :layout :up-down\n          :src\n\"[slider\n :model (rgt/atom 4)\n :min 0, :max 50, :step 1\n :width \\\"200px\\\"\n :on-change (fn[val] '(:update :the :model :ratom))]\n\"]\n]])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", :out-height "100px", :eid "ed-tab3", :height "800px"}}, :specs [{:usermeta {:frame {:top [[gap :size "100px"] [h-split :initial-split 44 :panel-1 [md {:style {:font-size "19px", :width "600px"}} "\n# Callback functions and databases\n---\n## Callbacks\n* On change functions for reactive components\n  - Called when\n    - reactive component model (a ratom) changes\n    - user input on component : click, type in, pull, etc\n  - Typically passed value and model\n  - Output varies on context\n\n* ClojureScript functions\n\n* Mixed code capability\n\n\n          \n## Databases\n* Cannot directly *save* function objects or ratoms\n* Need a simple flexible \"serialization\"\n* Ratom database for component models\n* Function *symbol* database for callback functions\n\n## Symbol translation\n* Function symbols need to be translated during [hiccup processing](https://github.com/reagent-project/reagent/blob/master/doc/UsingHiccupToDescribeHTML.md)\n* Need to be added to hiccup symbol translation\n* Done via Hanami symbol callback function [symxlate-cb](https://github.com/jsa-aerial/hanami#client-start)\n\n"] :panel-2 [cm :out-width "700px" :layout :up-down :readonly false :width "700px" :src "[slider\n :model (rgt/atom 4)\n :min 0, :max 50, :step 1\n :width \"200px\"\n :on-change (fn[val] '(:update :the :model :ratom))]\n" :out-height "100px" :id "cm1" :fid :f1 :height "500px"]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Tab3", :id :tab3, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}} {:mixcode {:label "Mixed Code", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :mixcode, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 1}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"100px\"]\n        [h-split\n         :initial-split 25\n         :panel-1\n         [md {:style {:font-size \"19px\" :width \"600px\"}}\n\"\n# Mixed code techniques\n---\n## Code execution review\n* JS / client\n* JVM / server\n* Mixed interwoven client/server code\n\n## Running mixed code is inherently asynchronous:\n* Client (JS/ClJS) controls the flow\n* Intermixed execution *appears* synchronous\n* Implemented via rewriting to promise chains\n* Two indicator modes\n  - Special `clj` tag\n  - Functions with `clj true` meta data\n\n![img]( https://github.com/jsa-aerial/aerosaite/blob/main/doc/images/saite-client-server.png?raw=true)\n\n\n\"]\n         :panel-2\n         [cm :id \"cm1\" :fid :FID\n          :width \"750px\" :out-width \"900px\"\n          :height \"700px\" :out-height \"700px\"\n          :readonly false :layout :left-right\n          :src \" \"]\n\n]])", :out-height "100px", :eid "ed-mixcode", :height "800px"}}, :specs [{:usermeta {:frame {:top [[gap :size "100px"] [h-split :initial-split 25 :panel-1 [md {:style {:font-size "19px", :width "600px"}} "\n# Mixed code techniques\n---\n## Code execution review\n* JS / client\n* JVM / server\n* Mixed interwoven client/server code\n\n## Running mixed code is inherently asynchronous:\n* Client (JS/ClJS) controls the flow\n* Intermixed execution *appears* synchronous\n* Implemented via rewriting to promise chains\n* Two indicator modes\n  - Special `clj` tag\n  - Functions with `clj true` meta data\n\n![img]( https://github.com/jsa-aerial/aerosaite/blob/main/doc/images/saite-client-server.png?raw=true)\n\n\n"] :panel-2 [cm :out-width "900px" :layout :left-right :readonly false :width "750px" :src " \n;;; Run on JS with Ctrl-X Ctrl-E\n;;; Run on JVM with Ctrl-X Ctrl-J\n(map #(vector % (Math/sin %)) (range 0 Math/PI 0.2))\n\n\n;;; Define a datasource link\n;;; Run on JVM\n(def datarepo\n  \"https://raw.githubusercontent.com/jsa-aerial/aerosaite/main/resources/Data\")\n(def gss-mean-temps\n  (fs/join datarepo\n           \"gss-data-org-uk-annual-mean-temp-with-trends-actual_data.csv\"))\n\n\n;;; Make sure deps/reqs have run - they should run automatically but\n;;; that may not happen if something hiccups.\n(-> gss-mean-temps\n  (tc/dataset\n   {:dataset-name \"annual-mean-temp\"})\n  (tc/rename-columns {\"Year\" :year\n                      \"Geography\" :geography\n                      \"Annual Mean Temperature\" :AMT})\n  (tc/select-columns [:year :geography :AMT])\n  (tc/convert-types :year [[:string str]])\n  (tc/select-rows #(= \"UK\" (% :geography))))\n\n\n\n\n;;; Run on JS and JVM\n;;; Sychronized via rewriting to promise chains\n(let [[cols rows]\n      (clj (let [gssds (-> gss-mean-temps\n                         (tc/dataset\n                          {:dataset-name \"annual-mean-temp\"})\n                         (tc/rename-columns {\"Year\" :year\n                                             \"Geography\" :geography\n                                             \"Annual Mean Temperature\" :AMT})\n                         (tc/select-columns [:year :geography :AMT])\n                         (tc/convert-types :year [[:string str]])\n                         (tc/select-rows #(= \"UK\" (% :geography))))\n                 cols (tc/column-names gssds)\n                 rows (tc/rows gssds)]\n             [cols rows]))]\n  (mapv #(zipmap cols %) rows))\n\n\n\n\n;;; Define a CLIENT SIDE function for getting region amt data\n(defn gss-rgn-amt [rgn]\n  (let [rgn (format \"\\\"%s\\\"\" rgn)\n        [cols rows]\n        (clj (let [gssds (-> gss-mean-temps\n                           (tc/dataset\n                            {:dataset-name \"annual-mean-temp\"})\n                           (tc/rename-columns {\"Year\" :year\n                                               \"Geography\" :geography\n                                               \"Annual Mean Temperature\" :AMT})\n                           (tc/select-columns [:year :geography :AMT])\n                           (tc/convert-types :year [[:string str]])\n                           (tc/select-rows #(= rgn (% :geography))))\n                   cols (tc/column-names gssds)\n                   rows (tc/rows gssds)]\n               [cols rows]))]\n    (mapv #(zipmap cols %) rows)))\n\n;;; We can now call this function as a CLIENT function\n;;; Execute on JS, Ctrl-X Ctrl-E\n;;; The reason this works is because gss-rgn-amt does not finish until\n;;; the promise chain completes, so to its caller it looks to be running\n;;; all the time - even though it is mostly just waiting for the JVM\n;;;\n;;; ***HOWEVER*** If you use gss-rgn-amt in another client function that\n;;; function must be compiled in mixed mode!!!\n;;;\n(let [vgl-data (gss-rgn-amt \"UK\")]\n  vgl-data)\n\n\n\n\n(hc/xform ht/point-chart :FID :f1)\n\n(let [data (gss-rgn-amt \"UK\")]\n  (hc/xform\n   ht/point-chart\n   :FID :famt :VID :vamt\n   :DATA data\n   :X :year :XTYPE :temporal\n   :Y :AMT :YSCALE {:zero false}))\n\n\n\n\n\n:end\n" :out-height "700px" :id "cm1" :fid :f1 :height "700px"]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Mixcode", :id :mixcode, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}} {:tab4 {:label "Widgets", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab4, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 1}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"100px\"]\n        [h-split\n         :initial-split 25\n         :panel-1\n         [md {:style {:font-size \"19px\" :width \"600px\"}}\n\"\n# Widets\n---\n## Definitions\n* Based on Re-com components\n  - Any Re-com component may be used\n  - Typical sliders, buttons, checkboxes, dropdowns, etc\n  - Also layout components: h-box, splitters, scrollers, etc\n* Templates\n  - Widgets can be abstracted and parameterized\n  - You can then use them as high level constructs\n* Transformation\n  - Widgets in picture frames are transformed along with vis spec\n  - Models and callbacks use their DB translations\n  - Callbacks may reference their visualization for updates\n\n## Use\n* Picture frames\n* Layouts\n![img](https://github.com/jsa-aerial/hanami/blob/master/resources/public/images/picture-frame-layout.png?raw=true)\n\n\"]\n         :panel-2\n         [cm :id \"cm1\" :fid :FID\n          :width \"750px\" :out-width \"900px\"\n          :height \"700px\" :out-height \"700px\"\n          :readonly false :layout :left-right\n          :src \" \"]\n\n]])", :out-height "100px", :eid "ed-tab4", :height "800px"}}, :specs [{:usermeta {:frame {:top [[gap :size "100px"] [h-split :initial-split 25 :panel-1 [md {:style {:font-size "19px", :width "600px"}} "\n# Widets\n---\n## Definitions\n* Based on Re-com components\n  - Any Re-com component may be used\n  - Typical sliders, buttons, checkboxes, dropdowns, etc\n  - Also layout components: h-box, splitters, scrollers, etc\n* Templates\n  - Widgets can be abstracted and parameterized\n  - You can then use them as high level constructs\n* Transformation\n  - Widgets in picture frames are transformed along with vis spec\n  - Models and callbacks use their DB translations\n  - Callbacks may reference their visualization for updates\n\n## Use\n* Picture frames\n* Layouts\n![img](https://github.com/jsa-aerial/hanami/blob/master/resources/public/images/picture-frame-layout.png?raw=true)\n\n"] :panel-2 [cm :out-width "900px" :layout :left-right :readonly false :width "750px" :src " \n(def sliderInput\n  '[v-box :children\n    [[label :label [:span.bold :SLIDER-LBL]]\n     [h-box :children\n      [[label :label :MINLBL]\n       [slider\n        :model :SLIDER-MODEL\n        :min :MIN, :max :MAX, :step :STEP\n        :width :SLIDER-WIDTH\n        :on-change :SLIDER-CHG-FNSYM]\n       [label :label :MAXLBL]]]]])\n\n(hc/xform\n sliderInput\n :SLIDER-LBL \"hi\"\n :SLIDER-MODEL (sc/add-ratom :test 1)\n :SLIDER-CHG-FNSYM 'test)\n\n\n\n\n;;; First, basic callback, write to console\n(defn slider-fn-test [v]\n  (js/console.log \"Slider input \" v))\n\n;;; Next add model update so slider works\n(defn slider-fn-test [v]\n  (let [ra (sc/get-ratom :slide-test)]\n    (swap! ra (fn[_] v))\n    (js/console.log \"Slider input \" v)))\n\n;;; Finally add new data and update vis\n(defn slider-fn-test [v]\n  (let [ra (sc/get-ratom :slide-test)\n        data (mapv (fn[i] {:x i :y i}) (range v))]\n    (swap! ra (fn[_] v))\n    (js/console.log \"Slider v \" v)\n    (hmi/printchan \"Slider data \" data)\n    (hmi/visualize\n     (hc/xform ht/point-chart\n            :DATA data)\n     (js/document.getElementById (name :v1)))))\n\n\n;;; Add slider fn and symbol to function xlate DB and add the\n;;; model ratom to the model/ratom DB - see \"Callbacks\" tab\n(sc/add-symxlate 'slider-fn-test slider-fn-test)\n(sc/add-ratom :slide-test 1)\n\n\n;;; Paint the chart with slider - will appear at the top\n(hc/xform\n ht/point-chart\n :FID :f2 :VID :v1\n :DATA (mapv (fn[i] {:x i :y i}) (range 5)) ; change to your data source\n :LEFT [sliderInput]\n :SLIDER-CHG-FNSYM 'slider-fn-test\n :SLIDER-MODEL (sc/get-ratom :slide-test 1)\n :SLIDER-LBL \"Slider Test\"\n :TOP '[[gap :size \"200px\"]\n        ])\n\n" :out-height "700px" :id "cm1" :fid :f1 :height "700px"]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Tab4", :id :tab4, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}} {:tab5 {:label "API", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab5, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:vis 1, :cm 0, :fm 2}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"100px\"]\n        [h-split\n         :initial-split 25\n         :panel-1\n         [md {:style {:font-size \"19px\" :width \"600px\"}}\n\"\n# API\n---\n## Frames\n* sc/add-update-frame\n* sc/delete-frame\n\n## Callback DBs\n* sc/add-ratom\n* sc/get-ratom\n* sc/add-symxlate\n* sc/get-symxlate\n\n## Visualization\n* [hmi/visualize](https://github.com/jsa-aerial/hanami#visualization)\n\n## Misc\n* sc/run-prom-chain\n\n\"]\n       :panel-2\n         [cm :id \"cm1\" :fid :FID\n          :width \"750px\" :out-width \"900px\"\n          :height \"700px\" :out-height \"700px\"\n          :readonly false :layout :left-right\n          :src \"(sc/run-prom-chain ) \"]\n\n]])\n\n\n\n\n\n\n\n", :out-height "100px", :eid "ed-tab5", :height "800px"}}, :specs [{:usermeta {:frame {:top [[gap :size "100px"] [h-split :initial-split 25 :panel-1 [md {:style {:font-size "19px", :width "600px"}} "\n# API\n---\n## Frames\n* sc/add-update-frame\n* sc/delete-frame\n\n## Callback DBs\n* sc/add-ratom\n* sc/get-ratom\n* sc/add-symxlate\n* sc/get-symxlate\n\n## Visualization\n* [hmi/visualize](https://github.com/jsa-aerial/hanami#visualization)\n\n## Misc\n* sc/run-prom-chain\n\n"] :panel-2 [cm :out-width "900px" :layout :left-right :readonly false :width "750px" :src "(sc/run-prom-chain ) " :out-height "700px" :id "cm1" :fid :f1 :height "700px"]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Tab5", :id :tab5, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}} {:tab9 {:label "Dash Code", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :tab9, :$split nil, :out-width "1900px", :fn [quote editor-repl-tab], :layout :left-right, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n:cljs\n\n;;; Base layer for trend-chart\n(def trend-layer\n  (assoc ht/line-chart\n         :aerial.hanami.templates/defaults\n         {:X :data/x> :XTYPE :xtype>\n          :Y :data/y> :YTYPE :ytype>\n          :YSCALE {:zero false}\n          :DATA hc/RMV\n          :WIDTH :width> :HEIGHT :height>\n          :USERDATA hc/RMV}))\n\n;;; Trend chart - two layers.  1. base data, 2. loess trend line\n;;; Parameters :data/x for x-axis data. :data/y> for y-axis data\n;;;            :xtype> and :ytype> for axis types, will default to :XTYPE :YTYPE\n;;;            :loessbw> LOESS bandwidth (determines data window) in (0,1)\n;;;                      defaults to 0.3\n;;;            :width>, will default to 700\n;;;            :height>, will default to :HEIGHT default\n;;;            :trend-color> for loess line, defaults to \"firebrick\"\n(def trend-chart\n  (assoc ht/layer-chart\n         :description \"A two layer plot for base data and its smoothed trend line given by loess transform\"\n         :aerial.hanami.templates/defaults\n         {:LAYER [(hc/xform trend-layer)\n                  (hc/xform\n                   trend-layer\n                   :TRANSFORM [{:loess :data/y> :on :data/x>\n                                :bandwidth :loessbw>}]\n                   :MCOLOR :trend-color>)]\n          :trend-color> \"firebrick\"\n          :xtype> :XTYPE :ytype> :YTYPE\n          :loessbw> 0.3\n          :width> 700\n          :height> (hc/get-defaults :HEIGHT)}))\n\n\n;;; Define our abstracted trend chart for our GSS Anual Mean Temperature\n;;; dashboard.  Uses widgets markdow, sidebar, sliderInput and textInput\n(def gss-amt-chart\n  (assoc trend-chart\n         :usermeta\n         (xframes\n          {:TOP (xc top :defaults? false\n                    :components [markdown])\n           :LEFT (xc sidebar :defaults? false\n                     :components [sliderInput\n                                  textInput])})\n         :aerial.hanami.templates/defaults\n         (merge (trend-chart :aerial.hanami.templates/defaults)\n                {:INPUT-CHG-FNSYM #(-> % :SLIDER-CHG-FNSYM)\n                 :INPUT-MODEL #(-> % :SLIDER-MODEL)})))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", :out-height "900px", :eid "ed-tab9", :height "900px"}}, :specs []}} {:tab6 {:label "Dashboard Example", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab6, :$split 37.857142857142854, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:vis 1, :cm 0, :fm 1}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n\n;;; ***NOTE: Assumes the gss-rgn-amt function in tab \"Mixed Code\"\n;;;          has been defined!!\n\n;;; First just use base trend-chart and manually update -\n;;; Paint in body/canvas with Ctrl-X Ctrl-I (or Insert if available)\n;;;\n;;; Then manually change :loessbw> to various values between 0.01 and 0.999\n;;; repainting for each new value - see trend line 'smoothness' change\n(let [data (gss-rgn-amt \"UK\")]\n  (hc/xform\n   trend-chart\n   :FID :ftrend :VID :vtrend\n   :DATA data\n   :data/x> :year :xtype> :temporal\n   :data/y> :AMT :YSCALE {:zero false}\n   :loessbw> 0.1))\n\n\n\n;;; Fully functioning slider loess bandwith control\n;;; REMEMBER THIS NEEDS TO BE RUN AS MIXED BECAUSE OF gss-rgn-amt!!\n(defn amt-slider [v]\n  (let [r (sc/get-ratom :amtslider)\n        data (gss-rgn-amt \"UK\")]\n    (swap! r (fn[_] (str v)))\n    (js/console.log \"Slider v\" v)\n    (hmi/visualize\n     (hc/xform\n      gss-amt-chart\n      :DATA data\n      :data/x> :year :xtype> :temporal\n      :data/y> :AMT :YSCALE {:zero false}\n      :loessbw> v)\n     (js/document.getElementById (name :vamt)))))\n\n\n;;; Add slider function and ratom to databases\n;;; See tab \"Callbacks\" for details\n(sc/add-symxlate 'amt-slider amt-slider)\n(sc/add-ratom :amtslider \"0.3\")\n\n;;; Paint the new dashboard and chart\n(let [data (gss-rgn-amt \"UK\")]\n  (hc/xform\n   gss-amt-chart\n   :FID :famt :VID :vamt\n   :DATA data\n   :data/x> :year :xtype> :temporal\n   :data/y> :AMT :YSCALE {:zero false}\n   :MDTXT \"GSS Mean Annual Temperature\"\n   :SLIDER-LBL \"LOESS window\"\n   :MIN 0.1 :MAX 0.9 :STEP 0.1\n   :SLIDER-MODEL (sc/get-ratom :amtslider)\n   :SLIDER-CHG-FNSYM 'amt-slider))\n\n", :out-height "200px", :eid "ed-tab6", :height "900px"}}, :specs []}} {:tab92 {:label "Dash Code 2", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :tab92, :$split nil, :out-width "1900px", :fn [quote editor-repl-tab], :layout :left-right, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n\n;;; Define the region choices - Use Ctrl-X Ctrl-C to ensure MIXED code\n;;;        execution because of `clj` tag.\n(def region-choices\n  (clj (-> gss-mean-temps\n         (tc/dataset\n          {:dataset-name \"annual-mean-temp\"})\n         (tc/rename-columns {\"Year\" :year\n                             \"Geography\" :geography\n                             \"Annual Mean Temperature\" :AMT})\n         (tc/select-columns [:year :geography :AMT])\n         (->> vector (reduce-cols :geography {:cnt (dsr/row-count)\n                                              :AMT (dsr/mean :AMT)\n                                              :year (dsr/mean :year)}))\n         (tc/select-rows #(not (re-find #\"trend\" (% :geography))))\n         (tc/select-columns :geography)\n         tc/rows flatten sort\n         (->> (mapv (fn[id label] {:id id :label label}) (range))))))\n\n\n\n;;; Define new gss-amt-chart on client - put cursor at end and Ctrl-X Ctrl-E\n;;;        put cursor anywhere in body and Ctrl-X Ctrl-C\n(def gss-amt-chart\n  (assoc trend-chart\n         :usermeta\n         (xframes\n          {:TOP (xc top :defaults? false\n                    :components [markdown])\n           :LEFT (xc sidebar :defaults? false\n                     :components [sliderInput\n                                  textInput\n                                  ['gap :size \"50px\"]\n                                  singleDropdown])})\n         :aerial.hanami.templates/defaults\n         (merge (trend-chart :aerial.hanami.templates/defaults)\n                {:DROPDOWN-LBL \"Select Region\" :DROPDOWN-WIDTH \"200px\"\n                 :CHOICES region-choices\n                 :PLACEHOLDER \"region\"\n                 :INPUT-CHG-FNSYM #(-> % :SLIDER-CHG-FNSYM)\n                 :INPUT-MODEL #(-> % :SLIDER-MODEL)})))\n\n\n\n\n\n\n\n\n", :out-height "900px", :eid "ed-tab92", :height "900px"}}, :specs []}} {:tab62 {:label "Dashboard Example 2", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :tab62, :$split 37.80952380952381, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:vis 1, :cm 0, :fm 1}, :ns saite2.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n;;; Update slider fn to account for region\n(defn amt-slider [v]\n  (let [r (sc/get-ratom :amtslider)\n        rid (deref (sc/get-ratom :amtregion))\n        rgn (->> region-choices (filter #(= (% :id) rid)) first :label)\n        data (gss-rgn-amt rgn)]\n    (swap! r (fn[_] (str v)))\n    (js/console.log \"Slider v\" v)\n    (hmi/visualize\n     (hc/xform\n      gss-amt-chart\n      :DATA data\n      :data/x> :year :xtype> :temporal\n      :data/y> :AMT :YSCALE {:zero false}\n      :loessbw> v)\n     (js/document.getElementById (name :vamt)))))\n\n\n\n(sc/add-symxlate 'amt-slider amt-slider)\n(sc/add-ratom :amtslider \"0.3\")\n\n\n;;; Add new reactive region function for dropdown\n(defn amt-region [id]\n  (let [rgn (->> region-choices (filter #(= (% :id) id)) first :label)\n        data (gss-rgn-amt rgn)\n        r (sc/get-ratom :amtregion)]\n    (js/console.log \"AMT-REGION \" id)\n    (reset! r id)\n    (hmi/visualize\n     (hc/xform\n      gss-amt-chart\n      :DATA data\n      :data/x> :year :xtype> :temporal\n      :data/y> :AMT :YSCALE {:zero false})\n     (js/document.getElementById (name :vamt)))))\n\n\n;;; Need to add new symbol translation and ratom\n(sc/add-symxlate 'amt-region amt-region)\n(sc/add-ratom :amtregion 3)\n\n\n\n;;; Update xform with dropdown function symbol and model\n(let [data (gss-rgn-amt \"UK\")]\n  (hc/xform\n   gss-amt-chart\n   :FID :famt :VID :vamt\n   :DATA data\n   :data/x> :year :xtype> :temporal\n   :data/y> :AMT :YSCALE {:zero false}\n   :MDTXT \"GSS Mean Annual Temperature\"\n   :SLIDER-LBL \"LOESS window\"\n   :MIN 0.1 :MAX 0.9 :STEP 0.1\n   :SLIDER-MODEL (sc/get-ratom :amtslider)\n   :SLIDER-CHG-FNSYM 'amt-slider\n   :DROPDOWN-CHG-FNSYM 'amt-region\n   :DROPDOWN-MODEL (sc/get-ratom :amtregion)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:end\n\n", :out-height "200px", :eid "ed-tab62", :height "900px"}}, :specs []}}]
