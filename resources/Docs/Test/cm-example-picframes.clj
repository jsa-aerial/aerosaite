[{:chap3 {:label "CodeMirror editors in picture frame elements", :opts {:order :row, :eltsper 2, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :chap3, :$split 0, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 1, :fm 6}, :ns doc.code, :ed-out-order :first-last, :width "730px", :src "\n(defn roundit [r & {:keys [places] :or {places 4}}]\n  (let [n (Math/pow 10.0 places)]\n    (-> r (* n) Math/round (/ n))))\n\n(sc/set-tbody-cm-defaults\n {:width \"500px\" ;;:height \"30px\"\n  :out-width \"500px\" ;; :out-height \"0px\"\n  :ed-out-order :first-last})\n\n\n(hc/xform\n ht/empty-chart\n :FID :f1\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"50px\"]\n        [v-box :gap \"5px\"\n         :children\n         [[md \"#### A couple static (markdown) editor panes\"]\n          [md \"* Here is how you inc a list of numbers\"]\n          [cm :id \"e1\" :fid :FID :src \"(map inc (range 10))\"]\n          [md \"* Here's a couple ways you can add up a list of numbers\"]\n          [cm :id \"e3\" :fid :FID :src \"(apply + (range 10))\n(reduce + (range 10))\"]]]])\n\n\n(hc/xform\n ht/empty-chart\n :FID :f2\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"50px\"]\n        [md {:style {:font-size \"16px\"}} \"\"]])\n\n(hc/xform\n ht/point-chart\n :FID :f3 :VID :scatter-1\n :UDATA \"data/cars.json\"\n :X \"Horsepower\" :Y \"Miles_per_Gallon\" :COLOR \"Origin\"\n :TOP '[[gap :size \"50px\"]\n        [md \"#### Live editor with associated visualization element\"]]\n :LEFT '[[gap :size \"50px\"]\n         [h-box :gap \"5px\"\n          :children\n          [[cm :id \"cm-scatter-1\" :fid :FID\n            :readonly false :vid :VID\n            :width \"500px\" :height \"200px\"\n            :src\n\"(hmi/visualize\n (hmi/get-vspec :scatter-1)\n (js/document.getElementById \\\"scatter-1\\\"))\n\n;;; Add some colored LaTex to the bottom\n(hmi/update-frame-element\n :f3\n :bottom\n [h-box\n  :children\n  [[gap :size \\\"550px\\\"]\n   [md {:style {:font-size \\\"20px\\\" :color \\\"blue\\\"}}\n      \\\" \n* P(x) = \\\\\\\\(\\\\\\\\frac{1}{\\\\\\\\sqrt{2\\\\\\\\pi \\\\\\\\sigma^2}} e^{- \\\\\\\\frac{(x - \\\\\\\\mu)^2}{2\\\\\\\\sigma ^2}}\\\\\\\\)\n\n* \\\\\\\\(f(x) = x^2\\\\\\\\)\\\"]]])\n\n;;; Clear it\n(hmi/update-frame-element\n :f3 :bottom [[md \\\"\\\"]])\n\n\n;;; Def a simple distribution for next two plots\n(def obsdist\n  (let [obs [[0 9] [1 78] [2 305] [3 752]\n            [4 1150] [5 1166] [6 899] [7 460]\n            [8 644] [9 533] [10 504]]\n        totcnt (->> obs (mapv second) (apply +))\n        pdist (map (fn[[k cnt]] [k (/ cnt totcnt)])\n                   obs)]\n    pdist))\n\n;;; Plot layered as bar-chart with a rule for mean\n(hmi/visualize\n (hc/xform\n  ht/layer-chart\n  :VID :wght-mean-dist\n  :TITLE \\\"Distribution with weighted mean\\\"\n  :LAYER\n  [(hc/xform ht/bar-layer :XTITLE \\\"Count\\\" :YTITLE \\\"Probability\\\")\n   (hc/xform ht/xrule-layer :X \\\"m\\\")]\n  :DATA (mapv (fn[[x y]] {:x x :y y :m 5.7}) obsdist))\n (js/document.getElementById \\\"scatter-1\\\"))\n\n;;; Plot as a contour plot\n(hmi/visualize\n (hc/xform\n  ht/contour-plot\n  :VID :contour-dist\n  :MODE \\\"vega\\\"\n  :HEIGHT 400, :WIDTH 500 :SCALEFACTOR 2\n  :X \\\"Horsepower\\\", :XTITLE \\\"Engine Horsepower\\\"\n  :Y \\\"Miles_per_Gallon\\\" :YTITLE \\\"Miles/Gallon\\\"\n  :UDATA \\\"data/cars.json\\\"\n  :XFORM-EXPR #(let [d1 (% :X)\n                     d2 (% :Y)]\n                 (format \\\"datum['%s'] != null && datum['%s'] !=null\\\" d1 d2)))\n (js/document.getElementById \\\"scatter-1\\\"))\n\n \"] [p {:style {:width \"50px\" :min-width \"50px\"}} \"\"]]]])\n\n\n(hc/xform\n ht/empty-chart\n :FID :f4\n :LEFT '[[p {:style {:width \"50px\" :min-width \"50px\"}}]]\n :TOP '[[gap :size \"50px\"]\n        [md {:style {:font-size \"16px\"}} \"\"]])\n\n(hc/xform\n ht/empty-chart\n :FID :f5\n :TOP '[[gap :size \"50px\"]\n        [v-box :gap \"5px\"\n         :children\n         [[md \"#### Live editor with output on bottom\"]\n          [cm :id \"e4\" :fid :FID\n           :readonly false\n           :width \"500px\" :height \"160px\"\n           :src\n\"(defn addem\n  ([n1 & ns]\n   (addem (cons n1 ns)))\n  ([ns]\n   (reduce + ns)))\n\n(addem 1 2 3 4 5)\n(addem (range 50))\"]]]]\n )\n\n(hc/xform\n ht/empty-chart\n :FID :f6\n :TOP '[[gap :size \"50px\"]\n        [v-box :gap \"5px\"\n         :children\n         [[md \"#### Live editor with output on right\"]\n          [cm :id \"e5\" :fid :FID\n           :readonly false\n           :width \"500px\" :height \"210px\"\n           :out-width \"100px\" :out-height \"210px\"\n           :layout :left-right\n           :src\n\"(defn addem\n  ([n1 & ns]\n   (addem (cons n1 ns)))\n  ([ns]\n   (reduce + ns)))\n\n(addem 1 2 3 4 5)\n(addem (range 50))\n(addem (range 1 6))\"]]]]\n )", :out-height "100px", :eid "ed-chap3", :height "790px"}}, :specs [{:usermeta {:frame {:top [[gap :size "50px"] [v-box :gap "5px" :children [[md "#### A couple static (markdown) editor panes"] [md "* Here is how you inc a list of numbers"] [cm :id "e1" :fid :f1 :src "(map inc (range 10))"] [md "* Here's a couple ways you can add up a list of numbers"] [cm :id "e3" :fid :f1 :src "(apply + (range 10))\n(reduce + (range 10))"]]]], :pos :after, :at :end, :fid :f1, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Chap3", :id :chap3, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}} {:usermeta {:frame {:top [[gap :size "50px"] [md {:style {:font-size "16px"}} ""]], :pos :after, :at :end, :fid :f2, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Chap3", :id :chap3, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}} {:encoding {:y {:field "Miles_per_Gallon", :type "quantitative"}, :color {:field "Origin", :type "nominal"}, :x {:field "Horsepower", :type "quantitative"}, :tooltip [{:field "Horsepower", :type "quantitative"} {:field "Miles_per_Gallon", :type "quantitative"}]}, :usermeta {:tab {:id :chap3, :label "Chap3", :opts {:order :row, :eltsper 2, :rgap "20px", :cgap "20px", :size "auto"}}, :frame {:top [[gap :size "50px"] [md "#### Live editor with associated visualization element"]], :left [[gap :size "50px"] [h-box :gap "5px" :children [[cm :id "cm-scatter-1" :fid :f3 :readonly false :vid :scatter-1 :width "500px" :height "200px" :src "(hmi/visualize\n (hmi/get-vspec :scatter-1)\n (js/document.getElementById \"scatter-1\"))\n\n;;; Add some colored LaTex to the bottom\n(hmi/update-frame-element\n :f3\n :bottom\n [h-box\n  :children\n  [[gap :size \"550px\"]\n   [md {:style {:font-size \"20px\" :color \"blue\"}}\n      \" \n* P(x) = \\\\(\\\\frac{1}{\\\\sqrt{2\\\\pi \\\\sigma^2}} e^{- \\\\frac{(x - \\\\mu)^2}{2\\\\sigma ^2}}\\\\)\n\n* \\\\(f(x) = x^2\\\\)\"]]])\n\n;;; Clear it\n(hmi/update-frame-element\n :f3 :bottom [[md \"\"]])\n\n\n;;; Def a simple distribution for next two plots\n(def obsdist\n  (let [obs [[0 9] [1 78] [2 305] [3 752]\n            [4 1150] [5 1166] [6 899] [7 460]\n            [8 644] [9 533] [10 504]]\n        totcnt (->> obs (mapv second) (apply +))\n        pdist (map (fn[[k cnt]] [k (/ cnt totcnt)])\n                   obs)]\n    pdist))\n\n;;; Plot layered as bar-chart with a rule for mean\n(hmi/visualize\n (hc/xform\n  ht/layer-chart\n  :VID :wght-mean-dist\n  :TITLE \"Distribution with weighted mean\"\n  :LAYER\n  [(hc/xform ht/bar-layer :XTITLE \"Count\" :YTITLE \"Probability\")\n   (hc/xform ht/xrule-layer :X \"m\")]\n  :DATA (mapv (fn[[x y]] {:x x :y y :m 5.7}) obsdist))\n (js/document.getElementById \"scatter-1\"))\n\n;;; Plot as a contour plot\n(hmi/visualize\n (hc/xform\n  ht/contour-plot\n  :VID :contour-dist\n  :MODE \"vega\"\n  :HEIGHT 400, :WIDTH 500 :SCALEFACTOR 2\n  :X \"Horsepower\", :XTITLE \"Engine Horsepower\"\n  :Y \"Miles_per_Gallon\" :YTITLE \"Miles/Gallon\"\n  :UDATA \"data/cars.json\"\n  :XFORM-EXPR #(let [d1 (% :X)\n                     d2 (% :Y)]\n                 (format \"datum['%s'] != null && datum['%s'] !=null\" d1 d2)))\n (js/document.getElementById \"scatter-1\"))\n\n "] [p {:style {:width "50px", :min-width "50px"}} ""]]]], :fid :f3, :at :end, :pos :after}, :opts {:export {:png true, :svg true}, :scaleFactor 1, :editor true, :source false, :renderer "canvas", :mode "vega-lite"}, :vid :scatter-1, :msgop :tabs, :session-name "Exploring"}, :mark {:type "circle"}, :width 400, :background "floralwhite", :height 300, :data {:url "data/cars.json"}} {:usermeta {:frame {:top [[gap :size "50px"] [md {:style {:font-size "16px"}} ""]], :pos :after, :at :end, :fid :f4, :left [[p {:style {:min-width "50px", :width "50px"}}]]}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Chap3", :id :chap3, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}} {:usermeta {:frame {:top [[gap :size "50px"] [v-box :gap "5px" :children [[md "#### Live editor with output on bottom"] [cm :id "e4" :fid :f5 :readonly false :width "500px" :height "160px" :src "(defn addem\n  ([n1 & ns]\n   (addem (cons n1 ns)))\n  ([ns]\n   (reduce + ns)))\n\n(addem 1 2 3 4 5)\n(addem (range 50))"]]]], :pos :after, :at :end, :fid :f5}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Chap3", :id :chap3, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}} {:usermeta {:frame {:top [[gap :size "50px"] [v-box :gap "5px" :children [[md "#### Live editor with output on right"] [cm :id "e5" :fid :f6 :readonly false :width "500px" :height "210px" :out-width "100px" :out-height "210px" :layout :left-right :src "(defn addem\n  ([n1 & ns]\n   (addem (cons n1 ns)))\n  ([ns]\n   (reduce + ns)))\n\n(addem 1 2 3 4 5)\n(addem (range 50))\n(addem (range 1 6))"]]]], :pos :after, :at :end, :fid :f6}, :session-name "Exploring", :opts {:mode "vega-lite", :source false, :export {:png true, :svg true}, :renderer "canvas", :scaleFactor 1, :editor true}, :msgop :tabs, :tab {:label "Chap3", :id :chap3, :opts {:eltsper 2, :size "auto", :rgap "20px", :cgap "20px", :order :row}}}}]}}]
