[{:ed4 {:label "Mix 1", :opts {:order :row, :eltsper 1, :size "auto", :wrapfn {:tid :ed4, :$split nil, :out-width "1200px", :fn [quote editor-repl-tab], :layout :left-right, :ns my.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "10\n\n\n(defn roundit [r & {:keys [places] :or {places 4}}]\n  (let [n (Math/pow 10.0 places)]\n    (-> r (* n) Math/round (/ n))))\n\n(defn log2 [x]\n  (let [ln2 (Math/log 2)]\n    (/ (Math/log x) ln2)))\n\n(def obsdist\n  (clj\n   (deref\n    (def obsdist\n      (let [obs [[0 9] [1 78] [2 305] [3 752] [4 1150] [5 1166]\n                 [6 899] [7 460] [8 644] [9 533] [10 504]]\n            totcnt (->> obs (mapv second) (apply +))\n            pdist (map (fn[[k cnt]] [k (double (/ cnt totcnt))]) obs)]\n        pdist)))))\n\n(rest (clj (range 10)))\n(take 10 (clj (mapv #(let [RE (it/KLD (->> obsdist (into {}))\n                                      (->> (p/binomial-dist 10 %)\n                                        (into {})))\n                           REtt (roundit RE)\n                           ptt (roundit % :places 2)]\n                       {:x % :y RE})\n                    (range 0.06 0.98 0.01))))\n\n\n(let [x (clj (log2 23.4))\n      y (clj (roundit x))]\n  (+ x y))\n\n(defn timer [ms] (js/Promise. #(js/setTimeout %, ms)))\n(-> (timer 2000)\n  (.then #(do (def foo \"Done\"))))\n\n(-> (sc/read-data \"/home/jsa/Data/TIDs/R_T4_RIF_Bin_10_Up.csv\")\n  (.then (fn[res] (def foo res)))\n  (.then (fn[res] (let [cb (sc/get-cm-cb)] (cb {:value res})))))\n\n(let [code '(def foo (+ 3 7))\n      sym (second code)\n      resfm (pr-str (last code))\n      xcode (-> (sc/selfhost-jvm-eval resfm)\n              (.then (fn[res]\n                       (-> (sc/selfhost-jvm-eval\n                            (hc/xform '(+ :res 77) :res res))\n                         (.then (fn[res]\n                                  (def foo res)))\n                         (.then (fn[res] ((sc/get-cm-cb) {:value res})))))))]\n  xcode)\n\n(defn add-13 [x]\n  (clj (+ x 13)))\n\n(add-13 13)\n\n(let\n  [state {}]\n  (do\n   (cljs.core/defn\n    add-13\n    [x] \n    (-> (sc/selfhost-jvm-eval (+ x 13)) (.then (fn [res] res))))))\n\n(.then (add-13 12)\n       (fn[res] (let [CB (sc/get-cm-cb)] (CB {:value res}))))\n\n(defn addit [x z]\n  (let [w (* z z)\n        y (clj (log2 x))\n        xx (clj (Math/pow Math/PI z))]\n    [x y xx w (+ x y w)]))\n\n(addit 2 3)\n\n(def wxyz (addit 2 7))\n\n\n\n\n(-> (js/Promise. (fn[resolve] (resolve 1)))\n  (.then (fn[res] (hmi/printchan :RES1 res) res))\n  (.then (fn[res] (hmi/printchan :RES2 res) (+ res 3)))\n  (.then (fn[res] (hmi/printchan :RES3 res) (+ res 5))))\n\n\n\n\n[(log2 23.4) (roundit 3.141847263)]\n\n(def vec-from-clj (clj [(log2 23.4) (roundit 3.141847263)]))\n\n(def vec-from-clj-2\n  (let [a (clj (log2 23.4))\n        b (clj (roundit 3.141847263))]\n    [a b]))\n\n\n\n\n\n\n\n\n\n\n\n\n:end", :out-height "700px", :eid "ed-ed4", :height "700px"}}, :specs []}} {:check {:label "Mix 2", :opts {:order :row, :eltsper 1, :rgap "20px", :cgap "20px", :size "auto", :wrapfn {:tid :check, :$split 39.94140625, :out-width "730px", :fn [quote interactive-doc-tab], :cmfids {:cm 0, :fm 0}, :ns doc.code, :ed-out-order :first-last, :width "730px", :md-defaults nil, :src "\n(defn cb [res]\n  (let [CB (sc/get-cm-cb)]\n    (CB {:value res})\n    res))\n\n(defn roundit [r & {:keys [places] :or {places 4}}]\n  (let [n (Math/pow 10.0 places)]\n    (-> r (* n) Math/round (/ n))))\n\n(defn log2 [x]\n  (let [ln2 (Math/log 2)]\n    (/ (Math/log x) ln2)))\n\n\n(defn foo [] (clj (log2 2)))\n(foo)\n\n(let [x (clj (log2 5))]\n  [(* x x) (Math/pow 2 x)])\n\n(defn foo [] (clj (log2 2)) 10)\n(foo)\n\n(defn foo [n]\n  (let [x (clj (log2 n))]\n    (* x x)))\n(foo 10)\n\n(defn bar [n]\n  (let [m (+ n n)\n        x (foo m)]\n  (+ 3 x)))\n(bar 5)\n\n(let [x (bar 5)] (+ x 4))\n\n\n\n(def data\n  (clj (->> (range 0.00005 0.9999 0.001)\n              (mapv (fn[p] {:x p,\n                            :y (- (- (* p (m/log2 p)))\n                                  (* (- 1 p) (m/log2 (- 1 p))))})))))\n\n(hc/xform\n ht/layer-chart :FID :f1 :VID :v1\n :LEFT '[[p {:style {:width \"100px\":min-width \"100px\"}}]]\n :TOP '[[gap :size \"100px\"]\n         [md {:style {:font-size \"16px\"}}\n          \"Entropy \"]]\n :TITLE \"Entropy (Unpredictability)\"\n :LAYER [(hc/xform ht/gen-encode-layer\n                   :MARK \"line\"\n                   :XTITLE \"Probability of event\" :YTITLE \"H(p)\")\n         (hc/xform ht/xrule-layer :AGG \"mean\")]\n :DATA data)\n", :out-height "100px", :eid "ed-check", :height "700px"}}, :specs []}}]
